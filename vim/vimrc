"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer: Consen
" Last Change: 2014-11-16 19:14:03 [0]
" Version: 1.1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use Vim settings, rather than Vi settings(much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Set how many lines of history VIM has to remember.
set history=2048

" Set to auto read when a file is changed from the outside.
set autoread

" With a map leader it's possible to do extra key combinations
let mapleader = ","
let g:mapleader = ","

" Enable syntax highlighting.
syntax on

" Show line numbers.
set number
set numberwidth=4

" Automatically wrap left and right.
set whichwrap+=<,>,h,l,[,]

" Make backspace wrok like most other apps.
set backspace=2
" same as:
"set backspace=indent, eol, start

" Enable mouse in all modes
" (can't select and copy using right click)
"set mouse=a

" Automatically indent when add a curly bracket, etc.
set smartindent
" Disable automatic comment insertion.
"autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Tabs should be converted to a group of 4 spaces.
set shiftwidth=4    " numbers of spaces of tab (auto)indent.
set tabstop=4       " numbers of spaces of tab character.
set expandtab       " tabs are converted to spaces, use only when required.
set smarttab

" Highlight searches.
set hlsearch
" Do incremental searching, search as you type.
set incsearch
" Ignore case when searching.
set ignorecase
set smartcase
" Press Esc to clear search highlighting and any message already displayed.
"nnoremap <silent> <Esc> :silent nohlsearch<Bar>:echo<CR>

" GUI Settings
if has("gui_running")
    set guioptions-=T           " No Toolbar
    set guioptions-=e           " use non-GUI tab pages line
    set guioptions+=c           " Use console dialogs instead of popup dialogs
    set guioptions-=rL          " no left-hand and right-hand scrollbar
    set guifont=Consolas:h11    " Fontface and fontsize
endif

" Initial window size
"set lines=34 columns=124

" Hightlight current line and column.
set cursorline
"set cursorcolumn

" Use UTF-8
set encoding=utf-8

" Error bells are displayed visually.
"set visualbell

" Show editing mode.
set showmode

" Show line number, cursor position.
set ruler

" Display incomplete commands in the last line of the screen.
set showcmd

" Show autocomplete menus in the status line.
" Use tab completion to scroll through commands that start with what you typed.
set wildmenu
" Ignore compiled files.
set wildignore=*.o,*.obj,*.dll,*.exe,*~,*.pyc

" Show matching brackets when text indicator is over them.
"set showmatch
" ... but 1 tenths of a second to blink when matching brackets.
"set matchtime=1
" Set pairs including '<' and '>'.
set matchpairs+=<:>

" Lines longer than the width of the window will wrap.
set wrap
" Automatically break a line before it gets too long.
"set textwidth=82

" For list mode
" If you want to enter digraph, search hex value in :h digraph
set listchars=nbsp:¬,tab:›·,precedes:«,extends:»,trail:▪

" Keep 10 lines (top/bottom) for scope.
set scrolloff=10

" Splitting a window will put the new window below the current one.
set splitbelow

" Maximum number of items to show in the popup menu for Insert mode completion.
set pumheight=10

" Always show the status line.
set laststatus=2
" Format the status line.
set statusline=
"set statusline+=[CWD:\ %{getcwd()}]            " current working directory
"set statusline+=\ \ \ \ [%n/%{bufnr('$')}]     " buffer number / buffer count
set statusline+=[%n/%{bufnr('$')}]              " buffer number / buffer count
set statusline+=%r                              " read only flag
set statusline+=[%F]                            " full path
set statusline+=\ [%{strlen(&ft)?&ft:'none'}]   " filetype
set statusline+=\ \ %m                          " modified flag
set statusline+=%{(&key==\"\"?\"\":'[encr]')}   " encrypted ?
set statusline+=\ \ %w                          " preview window flag
set statusline+=%=                              " right align remainder
set statusline+=[%l/%L,%c]                      " line number/lines, column number
set statusline+=[0x%02B]                        " character value under the cursor
set statusline+=\ \ [%{&fileformat}]            " file format
set statusline+=\ [%{&fenc==\"\"?&enc:&fenc}]   " encoding

" Turn backup off, since most stuff is in SVN,GIT,etc.anyway...
set nobackup
set nowritebackup
set noswapfile

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" To insert timestamp, press F3.
" %w is replaced by the weekday as a decimal number [0, 6],
" with 0 representing Sunday.
nmap <F3> a<C-R>=strftime("%Y-%m-%d %H:%M:%S [%w]")<CR><Esc>
imap <F3> <C-R>=strftime("%Y-%m-%d %H:%M:%S [%w]")<CR>

" To save, press ctrl-s.
"nmap <c-s> :w<CR>
"imap <c-s> <Esc>:w<CR>a

" Toggle auto-indenting for code paste.
"set pastetoggle=<F2>

" space / shift-space scroll in normal mode.
"noremap <S-space> <C-b>
"noremap <space> <C-f>

" In normal mode, press Enter to toggle the current fold open/closed. However,
" if the cursor is not in a fold, move to next line(the default behavior).
" CTRL-M is equivalent to Enter, this is because carriage return is ASCII
" character no.13 and M is the 14th letter of the alphabet. see :h key-notation
"nnoremap <silent> <CR> @=(foldlevel('.')?'za':'ctrl-m')<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""
" vim-plug
""""""""""""""""""""""""

" Install vim-plug if we don't arlready have it
if empty(glob('~/.vim/autoload/plug.vim'))
    " Ensure all needed directories exist
    execute '!mkdir -pv ~/.vim/plugged'
    execute '!mkdir -pv ~/.vim/autoload'
    " Download the actual plugin manager
    execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" plugin on GitHub repo
Plug 'terryma/vim-multiple-cursors'
Plug 'scrooloose/nerdcommenter'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-surround'
Plug 'godlygeek/tabular'
Plug 'itspriddle/vim-stripper'
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'vim-scripts/matchit.zip'
Plug 'Lokaltog/vim-easymotion'
Plug 'consen/vim-easyselect'
"Plun 'Valloric/YouCompleteMe'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'nvie/vim-flake8'
Plug 'kopischke/vim-fetch'
Plug 'dhruvasagar/vim-table-mode'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'airblade/vim-gitgutter'
Plug 'scrooloose/nerdtree'
Plug 'majutsushi/tagbar'
Plug 'kien/ctrlp.vim'
Plug 'sjl/gundo.vim'
Plug 'jlanzarotta/bufexplorer'

Plug 'altercation/vim-colors-solarized'
Plug 'consen/molokai'

Plug 'junegunn/goyo.vim'
Plug 'yonchu/accelerated-smooth-scroll'
Plug 'kien/rainbow_parentheses.vim'

" Add plugins to &runtimepath
call plug#end()

"""""""""""""""""""""""""""""
" Goyo
"""""""""""""""""""""""""""""
let g:goyo_margin_top = 2
let g:goyo_margin_bottom = 2

"""""""""""""""""""""""""""""
" CtrlP
"""""""""""""""""""""""""""""
let g:ctrlp_map = '<c-p>'
let g:ctrlp_by_filename = 1
let g:ctrlp_working_path_mode = 'r'
let g:ctrlp_root_markers = ['SConstruct']
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

"""""""""""""""""""""""""""""
" Solarized
"""""""""""""""""""""""""""""
"set background=dark
"colorscheme solarized
"let g:solarized_menu=1     " menu 'Solarized'
"call togglebg#map("<F5>")  " press F5 to Toggle Background

"""""""""""""""""""""""""""""
" Molokai
"""""""""""""""""""""""""""""
set t_Co=256
let g:molokai_original = 1
colorscheme molokai

"""""""""""""""""""""""""""""
" NERDTree
"""""""""""""""""""""""""""""
nnoremap <silent> <F8> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\~$', '\.o$', '\.so$', '\.a$', '\.exe$', '\.pyc$']

"""""""""""""""""""""""""""""
" delimitMate
"""""""""""""""""""""""""""""
let delimitMate_matchpairs = "(:),[:],{:}"

"""""""""""""""""""""""""""""
" Stripper
"""""""""""""""""""""""""""""
let g:StripperNoStripOnSave = 1

"""""""""""""""""""""""""""""
" Tagbar
"""""""""""""""""""""""""""""
nnoremap <silent> <F9> :TagbarToggle<CR>
let g:tagbar_autofocus = 1

"""""""""""""""""""""""""""""
" YouCompleteMe
"""""""""""""""""""""""""""""
"let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_min_num_of_chars_for_completion = 1
"nnoremap <F12> :YcmCompleter GoToDefinition<CR>
"let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']

"""""""""""""""""""""""""""""
" UltiSnips
"""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

"""""""""""""""""""""""""""""
" vim-table-mode
"""""""""""""""""""""""""""""
let g:table_mode_corner_corner="+"
let g:table_mode_header_fillchar="="
